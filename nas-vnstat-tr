#!/usr/bin/env python3

import subprocess
import threading
import time
import os
import json

lock = threading.Lock()


class CheckResult(object):
    def __init__(self, ip, country) -> None:
        super().__init__()
        self.ip = ip
        self.country = country
        self.result = ""

    def __str__(self) -> str:
        ret = "\n\n%s\n%s\n-----\n" % (self.country, self.ip)
        ret += self.result
        return ret

    def check(self, maxtry=3):
        if maxtry == 0:
            self.result = "Timeout"
            return
        try:
            # "StrictHostKeyChecking=no"
            output = subprocess.check_output(
                ["ssh", "-o", "ConnectTimeout=15", "root@" + self.ip, "/bin/bash", "/root/tr"])
            self.result = output.decode('ascii')
        except:
            self.check(maxtry-1)


if __name__ == '__main__':
    config = json.loads(open("config.json", "r").read())
    servers = config["servers"]["vip2"]
    # print(servers)
    hostList = []
    for item in servers.items():
        country = item[0]
        serverList = item[1]
        for server in serverList:
            hostList.append(CheckResult(ip=server, country=country))

    threads = []
    for checker in hostList:
        t = threading.Thread(target=CheckResult.check, args=(checker,))
        t.start()
        threads.append(t)

    for t in threads:
        t.join()

    for h in hostList:
        print(h)
